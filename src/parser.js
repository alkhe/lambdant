/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5],$V1=[5,55],$V2=[1,22],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,32],$V7=[1,18],$V8=[1,20],$V9=[1,21],$Va=[1,31],$Vb=[5,9,55],$Vc=[5,9,23,26,30,32,33,35,36,37,41,42,44,45,50,53,55],$Vd=[2,42],$Ve=[2,40],$Vf=[2,43],$Vg=[2,44],$Vh=[5,9,43,47,48,52,55],$Vi=[5,9,16,23,24,26,30,32,33,35,36,37,41,42,43,44,45,47,48,50,52,53,55],$Vj=[5,9,23,24,26,30,32,33,35,36,37,42,43,44,45,47,48,50,52,53,55],$Vk=[47,48],$Vl=[48,52],$Vm=[1,55],$Vn=[5,9,23,24,26,30,32,33,35,36,37,41,42,43,44,45,47,48,50,52,53,55],$Vo=[5,9,23,24,26,43,47,48,52,55],$Vp=[1,62],$Vq=[1,63],$Vr=[5,9,23,24,26,30,32,43,47,48,52,55],$Vs=[5,9,23,24,26,30,32,35,36,37,42,43,44,45,47,48,50,52,53,55],$Vt=[1,65],$Vu=[14,21,35,36,37,42,44,45,50,53,55],$Vv=[26,44,45,48,50];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"sequence":4,"EOF":5,"normal-sequence":6,"void-sequence":7,"statement":8,"SEQ":9,"declaration":10,"definition":11,"assignment":12,"full":13,"LOCAL":14,"lookup":15,"EQUALS":16,"object":17,"array":18,"member":19,"three":20,"AMP":21,"four":22,"QUESTION":23,"SOLIDUS":24,"five":25,"COLON":26,"six":27,"t-comb":28,"seven":29,"BANGBANG":30,"eight":31,"INFIX":32,"BANG":33,"nine":34,"NUM":35,"UNIT":36,"STRING":37,"lambda":38,"pattern":39,"ten":40,"DOT":41,"LPAREN":42,"RPAREN":43,"ID":44,"LBRACE":45,"object-entries":46,"RBRACE":47,"COMMA":48,"object-entry":49,"LANGLE":50,"array-contents":51,"RANGLE":52,"LSQUARE":53,"arg-list":54,"RSQUARE":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"SEQ",14:"LOCAL",16:"EQUALS",21:"AMP",23:"QUESTION",24:"SOLIDUS",26:"COLON",30:"BANGBANG",32:"INFIX",33:"BANG",35:"NUM",36:"UNIT",37:"STRING",41:"DOT",42:"LPAREN",43:"RPAREN",44:"ID",45:"LBRACE",47:"RBRACE",48:"COMMA",50:"LANGLE",52:"RANGLE",53:"LSQUARE",55:"RSQUARE"},
productions_: [0,[3,2],[4,1],[4,1],[6,2],[7,0],[7,2],[8,1],[8,1],[8,1],[8,1],[10,2],[11,4],[11,4],[11,4],[12,3],[12,3],[12,3],[12,3],[13,1],[20,2],[20,1],[22,5],[22,1],[25,3],[25,1],[27,2],[27,3],[27,3],[27,1],[29,2],[29,1],[28,2],[31,2],[31,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[39,1],[39,1],[39,1],[19,3],[19,3],[40,3],[15,1],[17,3],[46,3],[46,1],[46,0],[49,3],[49,3],[49,1],[18,3],[51,3],[51,1],[51,0],[38,5],[38,5],[38,4],[54,2],[54,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, af) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 4:
this.$ = af.seqadd($$[$0-1], $$[$0]);
break;
case 5:
this.$ = af.nullseq;
break;
case 6:
this.$ = af.voidseq($$[$0-1]);
break;
case 11:
this.$ = af.declare($$[$0]);
break;
case 12: case 13: case 14:
this.$ = af.define($$[$0-2], $$[$0]);
break;
case 15: case 16: case 17: case 18:
this.$ = af.assign($$[$0-2], $$[$0]);
break;
case 20:
this.$ = af.debug($$[$0]);
break;
case 22:
this.$ = af.conditional($$[$0-4], $$[$0-2], $$[$0]);
break;
case 24:
this.$ = af.compose($$[$0-2], $$[$0]);
break;
case 26:
this.$ = af.expr($$[$0], $$[$0-1]);
break;
case 27:
this.$ = af.expr(af.expr($$[$0-1], $$[$0-2]), $$[$0]);
break;
case 28:
this.$ = af.apply($$[$0-2], $$[$0]);
break;
case 30:
this.$ = af.expr($$[$0-1], $$[$0]);
break;
case 32:
this.$ = $$[$0];
break;
case 33:
this.$ = af.bangexpr($$[$0-1]);
break;
case 35:
this.$ = af.number($$[$0]);
break;
case 36:
this.$ = af.value(null);
break;
case 37:
this.$ = af.value(eval($$[$0]));
break;
case 45:
this.$ = af.access($$[$0-2], $$[$0], false);
break;
case 46:
this.$ = af.access($$[$0-2], $$[$0], true);
break;
case 47: case 49: case 56:
this.$ = $$[$0-1];
break;
case 48:
this.$ = af.id($$[$0]);
break;
case 50:
this.$ = af.objectadd($$[$0-2], $$[$0]);
break;
case 51:
this.$ = af.objectadd(af.object, $$[$0]);
break;
case 52:
this.$ = af.object;
break;
case 53:
this.$ = af.objectentry($$[$0-2], $$[$0], false);
break;
case 54:
this.$ = af.objectentry($$[$0-2], $$[$0], true);
break;
case 55:
this.$ = af.shortentry($$[$0]);
break;
case 57:
this.$ = af.arrayadd($$[$0-2], $$[$0]);
break;
case 58:
this.$ = af.arrayadd(af.array, $$[$0]);
break;
case 59:
this.$ = af.array;
break;
case 60:
this.$ = af.fn($$[$0-3], $$[$0-1]);
break;
case 61:
this.$ = af.lambda($$[$0-3], $$[$0-1]);
break;
case 62:
this.$ = af.thunk($$[$0-1]);
break;
case 63:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 64:
this.$ = [$$[$0]];
break;
}
},
table: [o([5,14,21,35,36,37,42,44,45,50,53],$V0,{3:1,4:2,6:3,7:4}),{1:[3]},{5:[1,5]},o($V1,[2,2],{9:[1,6]}),o($V1,[2,3],{8:7,10:8,11:9,12:10,13:11,15:13,19:14,17:15,18:16,20:17,34:19,22:23,38:27,39:28,40:29,25:30,27:33,29:34,31:35,14:[1,12],21:$V2,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),{1:[2,1]},o([5,14,21,35,36,37,42,44,45,50,53,55],[2,6]),o($Vb,[2,4]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{15:36,17:37,18:38,44:$V7,45:$V8,50:$V9},o($Vc,$Vd,{16:[1,39]}),o($Vc,$Ve,{16:[1,40]}),o($Vc,$Vf,{16:[1,41]}),o($Vc,$Vg,{16:[1,42]}),o($Vh,[2,19]),o($Vi,[2,48]),o($Vj,[2,34],{41:[1,43]}),o($Vk,[2,52],{46:44,49:45,15:46,40:47,42:$V6,44:$V7}),o($Vl,[2,59],{20:17,34:19,22:23,38:27,39:28,40:29,25:30,27:33,29:34,31:35,51:48,13:49,19:50,15:51,17:52,18:53,21:$V2,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),{15:51,17:52,18:53,19:50,22:54,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},o($Vh,[2,21],{23:$Vm}),o($Vn,[2,35]),o($Vn,[2,36]),o($Vn,[2,37]),o($Vn,[2,38]),o($Vn,[2,39]),o($Vn,[2,41]),o([5,9,23,24,43,47,48,52,55],[2,23],{26:[1,56]}),{15:51,17:52,18:53,26:[1,58],39:59,44:$V7,45:$V8,50:$V9,54:57},{13:60,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},o($Vo,[2,25],{28:61,30:$Vp,32:$Vq}),o($Vr,[2,29],{34:19,38:27,39:28,40:29,19:50,15:51,17:52,18:53,31:64,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),o($Vs,[2,31],{33:$Vt}),o($Vb,[2,11],{16:[1,66]}),{16:[1,67]},{16:[1,68]},{13:69,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:70,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:71,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:72,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{15:73,40:74,42:$V6,44:$V7},{47:[1,75],48:[1,76]},o($Vk,[2,51]),o($Vk,[2,55],{26:[1,77]}),{26:[1,78]},{48:[1,80],52:[1,79]},o($Vl,[2,58]),o($Vn,$Ve),o($Vn,$Vd),o($Vn,$Vf),o($Vn,$Vg),o($Vh,[2,20],{23:$Vm}),{15:51,17:52,18:53,19:50,22:81,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{15:51,17:52,18:53,19:50,27:82,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{15:51,17:52,18:53,26:[1,83],39:85,44:$V7,45:$V8,48:[1,84],50:$V9},o($Vu,$V0,{6:3,7:4,4:86}),o($Vv,[2,64]),{43:[1,87]},o($Vr,[2,26],{34:19,38:27,39:28,40:29,31:35,19:50,15:51,17:52,18:53,29:88,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),{15:51,17:52,18:53,19:50,29:89,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{15:51,17:52,18:53,19:50,31:90,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},o($Vs,[2,30],{33:$Vt}),o($Vj,[2,33]),{13:91,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:92,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:93,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),o($Vi,[2,45]),o($Vi,[2,46]),o($Vi,[2,49]),{15:46,40:47,42:$V6,44:$V7,49:94},{13:95,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{13:96,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},o($Vi,[2,56]),{13:97,15:51,17:52,18:53,19:50,20:17,21:$V2,22:23,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{23:$Vm,24:[1,98]},o($Vo,[2,24],{28:61,30:$Vp,32:$Vq}),o($Vu,$V0,{6:3,7:4,4:99}),o($Vu,$V0,{6:3,7:4,4:100}),o($Vv,[2,63]),{55:[1,101]},o($Vi,[2,47]),o($Vr,[2,27],{34:19,38:27,39:28,40:29,19:50,15:51,17:52,18:53,31:64,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),o($Vr,[2,28],{34:19,38:27,39:28,40:29,19:50,15:51,17:52,18:53,31:64,35:$V3,36:$V4,37:$V5,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va}),o($Vs,[2,32],{33:$Vt}),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vk,[2,50]),o($Vk,[2,53]),o($Vk,[2,54]),o($Vl,[2,57]),{15:51,17:52,18:53,19:50,22:102,25:30,27:33,29:34,31:35,34:19,35:$V3,36:$V4,37:$V5,38:27,39:28,40:29,42:$V6,44:$V7,45:$V8,50:$V9,53:$Va},{55:[1,103]},{55:[1,104]},o($Vn,[2,62]),o([5,9,24,43,47,48,52,55],[2,22],{23:$Vm}),o($Vn,[2,60]),o($Vn,[2,61])],
defaultActions: {5:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 35
break;
case 2:return 44
break;
case 3:return 26
break;
case 4:return 32
break;
case 5:return 9
break;
case 6:return 14
break;
case 7:return 36
break;
case 8:return 16
break;
case 9:return 41
break;
case 10:return 30
break;
case 11:return 33
break;
case 12:return 21
break;
case 13:return 42
break;
case 14:return 43
break;
case 15:return 53
break;
case 16:return 55
break;
case 17:return 50
break;
case 18:return 52
break;
case 19:return 45
break;
case 20:return 47
break;
case 21:return 48
break;
case 22:return 23
break;
case 23:return 24
break;
case 24:this.begin('mcomment')
break;
case 25:this.popState()
break;
case 26:this.begin('scomment')
break;
case 27:this.popState()
break;
case 28:this.begin('string')
break;
case 29:
								this.popState()
								yy_.yytext = `'` + yy_.yytext
								return 37
							
break;
case 30:return 5
break;
case 31:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:([\+\-]?([0-9])+(\.([0-9])+)?))/,/^(?:(([A-Za-z\_\$])(([A-Za-z\_\$])|([0-9]))*))/,/^(?::)/,/^(?:\*)/,/^(?:;)/,/^(?:@)/,/^(?:\(\))/,/^(?:=)/,/^(?:\.)/,/^(?:!!)/,/^(?:!)/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\?)/,/^(?:\/)/,/^(?:(##))/,/^(?:(([^\#])*#(#|([^\n]*\n))))/,/^(?:(#))/,/^(?:(([^\n])*\n))/,/^(?:('))/,/^(?:((([^\'\b\f\n\r\t\v])|(\\[\'\\bfnrtv]))*(')))/,/^(?:$)/,/^(?:.)/],
conditions: {"scomment":{"rules":[27],"inclusive":false},"mcomment":{"rules":[25],"inclusive":false},"string":{"rules":[29],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,30,31],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}